01: 主要关注启动，暂停，停止，优先级，线程安全。

02: 进程：操作系统结构的基础；程序+数据；操作系统进行资源调度的基本单位。
    线程：进程中相对独立运行的子任务。一个进程在运行，至少一个线程在运行。

03: Thread.java的start方法：通知 "进程规划器"，此进程已经准备就绪。
                            异步开启新线程执行。
    Thread.java的run方法：调用一个对象的一个方法。
                          在原线程中执行run方法。

04: Thread实现Runnable接口，故Thread t2 = new Thread(t1);是可行的。

05: 终止正在运行的线程：
        a,  使用退出标志，run方法执行完后，线程正常终止。
        b,  interrupt方法，run方法加上判断，线程正常终止。
        c,  stop不推荐。

06: Thread.java中的几个方法：
        public static boolean interrupted(){
            return currentThread().isInterrupted(true);
        }
        public boolean isInterrupted(){
            return isInterrupted(false);
        }
        private native boolean isInterrupted(boolean ClearInterrupted);
        public final native boolean isAlive();
        public static native void sleep(long millis) throws InterruptedException;

07: interrupted的使用：Thread.interrutped()
        如果t1.interrupted()，记得这是在实例中调用静态方法。
    isInterrupted的使用：t1.isInterrupted() 或 Thread.currentThread().isInterrupted()

08: interrupt对信号置true
    interrupted对信号置false。
    isInterrupted只是返回信号。
    sleep会对信号置false

09: stop, suspend, resume隐藏的问题，用由抛异常展现。

10: yield方法：public static native void yield();
    自愿放弃当前CPU资源，线程规划器可以又把CPU给这个线程。
    在调试和测试中，用来重现一些并发bug。

11: 线程优先级
    1,  [1~10]
        MIN_PRIORITY=1
        NORM_PRIORITY=5
        MAX_PRIORITY=10
    2,  线程B被线程A启动，
        线程B start时候，线程A的priority就是线程B的初始priority。

12: Java线程可分为：用户线程和守护线程。
    当JVM中只存在守护线程时，JVM会退出。
    t.setDaemon();必须在t.start();前设置好。

13: 知识点：
    1,  synchronized对象监视器为Object时的使用
    2,  synchronized对象监视器为Class时的使用
    3,  非线程安全是如何出现的
    4,  关键字volatile的主要作用
    5,  关键字volatile与synchronized的区别及使用情况

14: synchronized加在非静态方法上
    1,  方法内部定义的变量，不存在"非线程安全"问题。
    2,  对实例变量，只读取不修改，不存在"非线程安全"问题。
    3,  synchronized加在方法上是对象锁。
    4,  只有共享资源才有同步的必要。
    5,  一个对象的同步方法锁给出，对非同步方法没有影响。
    6,  锁的可重入：获取的当前对象的锁，可进入其他同步方法。
    7,  锁的可重入：子类可调用父类的同步方法。
    8,  出现异常，锁自动释放。
    9,  子类重写父类同步方法，如果没有synchronized，则不再同步。

15: synchronized同步块
    1,  同步块在非静态方法中，synchronized(this){} 和 synchronized(o){}
    2,  同步块的静态方法中，synchronized(o){}
    3,  同步块的意义：对方法中部分代码加上synchronized，进行同步。

16: synchronized使用class锁
    1,  形式一：在静态方法上加synchronized
    2,  形式二：synchronized(类名.class) {}
    3,  在同一个类中，1和2使用的是同一个锁
    4,  类名.class和其它对象锁(包含this)，不是一个锁。

17, synchronized锁加在对象上的注意点：
    1,  String的常量池
        String.valueOf()    //除了true和false，都是新建对象
    2,  Long的[-128, 127]的缓存
        Long.valueOf()      //[-128,127]就进入缓存
    3,  Integer的[-128, 127]的缓存
        Integer.valueOf()   //[-128,127]就进入缓存
    4,  Short的[-128, 127]的缓存
        Short.valueOf()     //[-128,127]就进入缓存
    5,  Character的[0, 127]的缓存
        Character.valueOf() //[0,127]就进入缓存
    6,  Float和Double没有缓存。 

18, 锁对象更改，每个线程加的锁是运行到synchronized时的锁对象。
    锁对象没有更改，锁对象中的属性更改，还是同一个锁。

19, volatile关键字
    1,  volatile的主要作用：让变量在多线程间可见。
    2,  volatile不支持原子性。
    3,  volatile是线程同步的轻量级实现。
        volatile性能好于synchronized。
        volatile修饰变量，synchronized修饰方法和代码块。
        实际中，synchronized使用较多。
    4,  多线程访问volatile不会发生阻塞。
        多线程访问synchronized会发生阻塞。
    5,  volatile保证数据的可见性，不保证原子性。
        synchronized保证原子性，间接保证可见性。
    6,  synchronized具有将线程工作内存中的私有变量与
        公共内存中的变量同步的功能。就是可见性。

20, 在java中，下列操作是原子操作：
    all assignments of primitive types except for long and double
    all assignments of references
    all operations of java.concurrent.Atomic* classes
    all assignments to volatile longs and doubles

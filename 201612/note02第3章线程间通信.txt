01, 应该掌握的技术点
    1,  使用wait/notify实现线程间的通信
    2,  生产者/消费者模式的实现
    3,  方法join的使用
    4,  ThreadLocal类的使用

02, wait()方法
    1,  方法wait()的作用：使执行当前代码的线程等待。
        wait()是Object类的方法。
        wait()将当前线程置入"预执行队列"中。
        当前线程在wait()处停止执行，直到接到通知或被中断为止。
    2,  调用wait()之前，线程必须获取该对象的对象级锁，
        即只能在同步方法或同步块中调用wait()方法。
        执行wait()方法后，当前线程释放锁。
        在从wait()返回前，线程与其它线程竞争重新获得锁。
    3,  如果调用wait()时，没有持有适当的锁，
        则抛出IllegalMonitorStateException，
        它是RuntimeException的一个子类，
        不需要try-catch

03, notify()方法
    1,  同样在同步方法或同步方法块中，
        调用前，线程也必须获得该对象的对象级锁。
    2,  如果调用notify()时，没有持有适当的锁，
        也会抛出IllegalMonitorStateException。
    3,  notify()用来通知那些可能等待该对象对象锁的其它线程。
        如果有多个线程等待，则由线程规划器选择出一个，
        对其发出notify通知。
    4,  执行notify()后，当前线程不会马上释放对象锁，
        呈wait状态的线程也不能马上获取该对象锁。
        要等到notify()所在的synchronized代码执行完。
    5,  当第一个获得了该对象锁的wait线程运行完毕之后，
        它会释放该对象锁，此时如果该对象没有再次使用notify语句，
        则即使该对象已经空闲，其它wait状态等待的线程
        由于没有得到该对象的通知，还会继续阻塞在wait状态，
        直到该对象发出一个notify或notifyAll。
    6,  notifyAll()方法：使所有正在等待队列中等待同一共享资源的
        "全部"线程从等待状态退出，进入可运行状态。

04, 线程状态：new Thread()
    1,  新建一个线程对象，再调用start()方法，
    2,  系统会为此线程分配CPU资源，使其处于Runnable(可运行)状态。
    3,  这是一个准备运行的阶段。如果抢到CPU资源，此线程处于Running状态。

05, 线程状态：Blocked(阻塞)
    1,  线程调用sleep方法，主动放弃占用的CPU资源。
    2,  线程调用阻塞IO方法。
    3,  线程试图获得一个同步监视器，但该同步监视器正被其它线程所持有。
    4,  线程执行了某个对象的wait方法，等待某个notify。
    5,  程序调用suspend方法。(不推荐使用)

06, 线程状态：进入Runnable
    1,  调用sleep方法，sleep超过指定的休眠时间。
    2,  线程调用的阻塞IO已经返回，阻塞方法执行完毕。
    3,  线程成功地获得了该同步监视器。
    4,  线程正在等待某个notify(通知)，其它线程发出了通知。 
    5,  处于挂起状态的线程调用了resume(恢复)方法。

07, 线程状态：销毁阶段
    run方法运行结束后，进入销毁阶段，整个线程执行结束。

08, 每个锁对象都有两个队列：就绪队列和阻塞队列。
    1,  就绪队列存储将要获得锁的线程。
    2,  阻塞队列存储被阻塞的线程。
    3,  一个线程被唤醒后，才会进入就绪队列，等待CPU的调度。
    4,  一个线程被wait后，就会进入阻塞队列，等待下一次被唤醒。

09, 生产者和消费者的实现一：一个生产者+一个消费者+一个缓存区
    1,  基本回顾：
            P操作 ---> 申请资源
            V操作 ---> 释放资源
            P(s)  ---> if s==0 wait else s=s-1
            V(s)  ---> s=s+1
    2,  定义两个同步信号量
            empty ---> 缓存区是否为空，初值1(代表缓存区大小)
            full  ---> 缓存区是否已满，初值0
            mutex ---> 临界区互斥信号量
    3,  两个线程：
        生产者线程：
            while(true) {
                生产一个产品
                P(empty);
                P(mutex);
                产品送往缓冲区
                V(mutex);
                V(full);
            }
        消费者线程：
            while(true) {
                P(full);
                P(mutex);
                从缓冲区取出一个产品
                V(mutex);
                V(empty);
                消费该产品
            }

10, 通过管道进行线程间通信：字节流
    1,  管道流(pipeStream)是一种特殊的流，
        用于在不同线程间直接传送数据。
    2,  一个线程发送数据到输出管道，
        另一个线程从管道中读数据。
        通过使用管道，实现不同线程间通信，
        无须借助于类似临时文件之类的东西。
    3,  JDK中提供4个类来使线程间进行通信：
        a,  PipedInputStream和PipedOutputStream
        b,  PipedReader和PipedWriter
    4,  代码见：Code12_通过管道进行线程间通信_字符流.java

11, 方法join的使用
    1,  在很多情况下，主线程创建并启动子线程。
        如果子线程中要进行大量的耗时运算，主线程往往早于子线程结束。
    2,  如果主线程想等待子线程执行完成之后再结束。
        join的作用：等待线程对象销毁。
    3,  a.join();在b线程中执行。
        b会进行无期限的阻塞，等待线程a销毁后再继续执行b线程后面的代码。
    4,  方法join具有使线程排队运行的作用，有些类似同步的运行效果。
        join方法内部使用wait()方法进行等待。
        synchronized关键字使用的是"对象监视器"原理做同步。
    5,  在b线程中：a.start(); a.join();
        在c线程中：b.interrupt()
        当b线程处于等待a结束时，b.interrutp()和b.join()会出现异常。
        这时，b线程停止，a线程仍在运行，c线程仍在运行。
    6,  join(long): 在b线程中，a.join(100); b的对象锁会释放。
        sleep(long): 在b线程中，Thread.sleep(100); b的对象锁不会释放。
    
12, 类ThreadLocal的使用
    1,  变量值的共享可以使用public static变量形式，
        所有的线程都使用同一个public static变量。
        如果想实现每一个线程都有自己的共享变量该如何解决？
        JDK提供的类ThreadLocal正是为了解决这样的问题。
    2,  类ThreadLocal主要解决的是每个线程绑定自己的值，
        可以将ThreadLocal类比喻成全局存放数据的盒子，
        盒子中可以存储每个线程的私有数据。
    3,  ThreadLocal实例通常是类中的private static字段，
        希望将状态与某一个线程(如，事务ID或用户ID)相关联。
    4,  ThreadLocal有四个方法：
        a,  T get():  返回此线程局部变量的当前线程副本中的值。
        b,  protected T initialValue(): 返回此线程局部变量的当前线程的"初始值"
        c,  void remove(): 移除此线程局部变量当前线程的值(会调用initialValue())
        d,  void set(T value): 将此线程局部变量的当前线程副本中值设置为指定值
    5,  ThreadLocal<String> tl = new ThreadLocal<String>();
        这样tl是不能调用initialValue()方法的。
        要想使用initialValue()方法，只需要实现一个MTL extends ThreadLocal
        然后重写initialValue()方法就行了。
        这样的代码ThreadLocal<String> tl = new MTL<String>();
        这样tl.get()返回的就是自己实现的初始值。

13, 类InheritableThreadLocal<T> extends ThreadLocal<T>
    1,  在创建子线程时，子线程会接收所有可继承的线程局部变量的初始值，
        以获得父线程所具有的值。通常，子线程的值与父线程的值是一致的；
        但是，通过重写这个类中的childValue方法，子线程的值可以作为父线程值的一个任意函数。
        当必须将变量(如用户ID和事务ID)中维护的每一个线程属性(per-thread-attribute)
        自动传送给创建的所有子线程时，应尽可能地采用可继承的线程局部变量，而不是采用普通的线程局部变量。
    2,  这个方法中，只有一个protected和public方法：protected T childValue(T parentValue);
        当创建子线程时，计算这个可继承线程局部线程的子线程的初始值，将该值作为父线程值的一个函数。
        在启动子线程之前，从父线程内部调用此方法。该方法仅返回其输入变量，如果所需要的是其它行为，则应该重写此方法。

14, ReentrantLock类
    1,  在Java多线程中，可以使用synchronized关键字来实现线程之间同步互斥。
        JDK1.5新增加的ReentrantLock能达到同样的效果，扩展功能更加强大，
        比如具有嗅探锁定、多路分支通知等功能，而且在使用上也比synchronized更加灵活。
    2,  关键字synchronized与wait()和notify()/notifyAll()方法相结合可以实现等待/通知模式。
        类ReentrantLock与Condition对象同样可以实现等待/通知模式，还可以实现多路通知功能：
            a,  一个Lock对象里面可以创建多个Condition实例
            b,  线程对象可以注册在指定的Condition中
            c,  可以有选择地进行线程通知，在调度线程上更加灵活。(notify()由JVM随机选择)
    3,  synchronized相当于整个Lock对象只有一个单一的Condition对象，所有的线程都
        注册在它一个对象的身上。线程开始notifyAll()时，需要通知所有的WAITING线程，
        没有选择权，会出现相当大的效率问题。
    4,  Object类的wait()方法相当于Condition类中的await()方法。
        Object类的wait(long timeout)方法相当于Condition类中的await(long time, TimeUnit unit)方法。
        Object类的notify()方法相当于Condition类中的signal()方法。
        Object类的notifyAll()方法相当于Condition类中的signalAll()方法。
    5,  使用样式是：
        private Lock l = new ReentrantLock();
        public Condition ca = l.newCondition();
        public Condition cb = l.newCondition();
        public void awaitDemo() {
            try {
                l.lock();
                System.out.println(".....");
                ca.await();
                System.out.println("#####");
            } catch(InterruptedException e) {
                e.printStackTrace();
            } finally {
                l.unlock();
            }
        }
        public void signalAllDemo() {
            try {
                l.lock();
                ca.signalAll();
                //ca.signal();在用法上一样，功能上不同。
            } finally {
                l.unlock();
            }
        }

15, Lock公平锁和非公平锁
    1,  锁Lock分为"公平锁"和"非公平锁"。
        "公平锁"：  线程获取锁的顺序是按照线程加在的顺序来分配的。
                    即先到先得的FIFO顺序。
        "非公平锁"：获取锁的抢占机制，是随机获得锁，先来的不一定
                    先得到锁。可能造成某些线程一直拿不到锁，也就不公平。

16, getHoldCount(), getQueueLength()和getWaitQueueLength(Condition condition)
    1,  这三个方法是ReentrantLock的方法，不是Lock的方法。
    2,  int getHoldCount():查询当前线程保持此锁的次数
    3,  int getQueueLength():返回正等待获取此锁的线程估计数
    4,  int getWaitQueueLength(Condition condition)
            返回等待此锁相关的给定条件的线程估计数。
    5,  protected Thread getOwner()
            返回目前拥有此锁的线程，如果此锁不被任何线程拥有，则返回null。
    6,  protected Collection<Thread> getQueuedThreads()
            返回一个Collection，包含可能正等待获取此锁的线程
    7,  protected Collection<Thread> getWaitingThreads(Collection collection)
            返回一个Collection，包含可能正在等待与此锁相关给定条件的那些线程
    8,  boolean hasQueuedThread(Thread thread)
            返回查询给定线程是否正在等待获取此锁
    9,  boolean hasQueuedThreads()
            查询是否有线程正在等待获取此锁
    10, boolean hasWaiters(Condition condition)
            查询是否有线程正在等待与此锁有关的给定条件
    11, boolean isFair()
            如果此锁的公平设置为true，则返回true
            默认情况下，返回false。
            new ReentrantLock() 等同于 new ReentrantLock(false)
    12, boolean isHeldByCurrentThread()
            查询当前线程是否保持此锁
    13, boolean isLocked()
            查询此锁是否由任意线程保持
    14, void lock()
            获取锁
    15, void lockInterruptibly()
            如果当前线程未被中断，则获取锁
    16, Condition newConditiono()
            返回用来与此Lock实例一起使用的Condition实例
    17, boolean tryLock()
            仅在调用时锁未被另一个线程保持的情况下，才获得该锁
    18, boolean tryLock(long timeout, TimeUnit unit)
            如果锁在给定等待时间内没有被另一个线程保持，且当前线程未被中断，则获取该锁
    19, void unlock()
            试图释放此锁

17, ReentrantReadWriteLock类
    1,  类ReentrantLock具有完全互斥排他的效果，即同一时间只有一个线程在执行
        ReentrantLock.lock()方法后面的任务。
        这样做虽然保证了实例变量的线程安全性，但效率非常底下。
    2,  读写锁ReentrantReadWriteLock，在某些不需要操作实例变量的方法中，
        完全可以使用读写锁ReentrantReadWriteLock来提升该方法的代码运行速度。
    3,  读写锁也有两个锁，
            一个是读操作相关的锁，称为共享锁；
            一个是写操作相关的锁，称为排他锁。
        规则：
            a,  多个读锁之间不互斥
            b,  读锁与写锁互斥
            c,  写锁与写锁互斥
        说明：
            a,  没有Thread进行写入操作时，多个读取操作的线程都能获取读锁。
            b,  同一时刻只允许一个Thread进行写入操作。

18, 定时器Timer
    1,  在指定的时间开始执行某一个任务。
        Timer类：设置计划任务
        TimerTask类：封装任务
    2,  与每个Timer对象相对应的是单个后台线程，用于顺序地执行所有的计时器任务。
        计时器任务应该迅速完成，如果完成某个计时器任务的时间太长，那么它会独占
        计时器的任务执行线程。可能会延迟后续任务的执行。
    3,  对Timer对象最后引用完成后，并且所有未处理的任务都已经执行完成后，
        计时器的任务执行线程会正常终止(并且成为垃圾回收的对象)。
    4,  默认情况下，任务执行线程并不作为守护线程来运行，能阻止应用程序终止。
        如果调用者想要快速终止计时器的任务执行线程，调用者应调用计时器的cancel方法。
    5,  如果意外终止了计时器的任务执行线程，例如调用了它的stop方法，
        那么所有以后对该计时器安排任务的尝试都将导致IllegalStateException，
        就好像调用了计时器的cancel方法一样。
    6,  此类是线程安全的：多个线程可以共享单个Timer对象，无需外部同步。
    7,  此类不提供实时保证：它使用Object.wait(long)方法来安排任务。
    8,  此类可扩展到大量同时安排的任务，内部使用二分堆来标识任务队列，
        安排任务的开销是O(log(n))，其中n是同时安排的任务数。
    9,  所有的构造方法都启动计时器线程。

19, 定时器Timer的方法
    1,  Timer() 创建一个新的计时器，不是守护线程
    2,  Timer(boolean isDaemon) 指定相关线程是不是守护线程。
            如果计时器用于安排重复的"维护活动"，应是守护线程。
    3,  Timer(String name)  Timer(String name, boolean isDaemon)
        指定相关线程的指定名称，指定相关线程是不是守护线程
    4,  void cancel() 终止此计时器，丢弃所有当前已安排的任务。
    5,  int purge() 从此计时器的任务队列中移除所有已取消的任务。
    6,  void schedule(TimerTask task, Date time)
            安排在指定的时间执行指定的任务。
    7,  void schedule(TimerTask task, Date firsttime, long period)
            安排在指定的任务在指定的时间开始，延迟period重复执行。
    8,  void schedule(TimerTask task, long delay)
            安排在指定延迟后执行指定的任务。
    9,  void schedule(TimerTask task ,long dely, long period)
            安排指定的任务从指定的延迟后开始进行，延迟period重复执行。
    10, void scheduleAtFixedRate(TimerTask task, Date firstTime, long period)
            FixedRate: 保证执行频率正好是指定周期的倒数。
    11, void scheduleAtFixedRate(TimerTask task, long delay, long period)
            FixedRate: 保证执行频率正好是指定周期的倒数。

20, 单例模式
    1,  立即加载---饿汉模式---静态方法
    2,  延迟加载---懒汉模式---synchronized加在方法上
    3,  延迟加载---懒汉模式---DCL双检查锁机制 Double-Check Locking
    4,  延迟加载---懒汉模式---静态内部类

21, 序列化与反序列化的单例模式
    添加如下代码到类中，可以实现反序列化得到还是单例。
    不需要@Override
        protected Object readResolve() throws ObjectStreamException {
            return s;
        }

22, 使用enum枚举数据类型实现单例模式
    枚举enum和静态代码块的特性相似；
    在枚举类时，构造方法会被自动调用，
    也可以应用这个特性实现单例设计模式。

